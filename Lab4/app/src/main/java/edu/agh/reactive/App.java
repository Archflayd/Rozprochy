/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package edu.agh.reactive;
import akka.Done;
import akka.NotUsed;
import akka.actor.typed.ActorSystem;
import akka.actor.typed.javadsl.Behaviors;
import akka.event.LoggingAdapter;
import akka.japi.Pair;
import akka.stream.*;
import akka.stream.javadsl.*;
import akka.stream.scaladsl.ZipWith2;
import edu.agh.reactive.hello.HelloActor;


import java.io.IOException;
import java.util.List;
import java.util.concurrent.CompletionStage;

public class App {

    public static void main(String[] args) {
        //////////////////////////////////////////
        //TASK 0 - hello
        // create actor system

//        final ActorSystem<String> helloSystem =
//                        ActorSystem.create(HelloActor.create(), "helloActor");
//        // send messages
//        helloSystem.tell("hello world");


        //////////////////////////////////////////
        //TASK 1 - math operations
///        final ActorSystem<MathActor.MathCommand> mathContext =
///                ActorSystem.create(MathActor.create(), "actorMath");
///        System.out.println("math main: actor system ready");

        // send messages
///        mathContext.tell(new MathActor.MathCommandAdd(5, 3));
///        mathContext.tell(new MathActor.MathCommandMultiply(5, 3, null));
//        mathContext.tell(new MathActor.MathCommandMultiply(5, 2, null));
//        mathContext.tell(new MathActor.MathCommandDivide(15, 3, null));
//        mathContext.tell(new MathActor.MathCommandDivide(15, 5, null));
//
//        mathContext.tell(new MathActor.MathCommandDivide(15, 0, null));
//        Thread.sleep(2000);
//
//        System.out.println("Math main: sending second package of messages");
//        mathContext.tell(new MathActor.MathCommandMultiply(5, 3, null));
//        mathContext.tell(new MathActor.MathCommandMultiply(5, 2, null));
//        mathContext.tell(new MathActor.MathCommandDivide(15, 3, null));
//        mathContext.tell(new MathActor.MathCommandDivide(15, 5, null));
///        System.out.println("Math main: messages send");



        /// TASK 2 - Reactive Streams in Akka Streams
        final ActorSystem streamSystem = ActorSystem.create(Behaviors.empty(), "streams");
        final Materializer materializer = Materializer.createMaterializer(streamSystem);
        // example how to create simple Akka Streams
        final Source<Integer, NotUsed> source = Source.range(1, 100);
        final Flow<Integer, String, NotUsed> flow = Flow.fromFunction((Integer n) -> n.toString());
        final Sink<String, CompletionStage<Done>> sink = Sink.foreach(str->System.out.println(str));
        final RunnableGraph<NotUsed> runnableGraph = source.via(flow).to(sink);
        runnableGraph.run(materializer);

        // create debugFlow and add slowSink components
        final Flow<Integer, String, NotUsed> debugFlow = Flow.fromFunction((Integer n) -> {System.out.println("Debug: " + n); return n.toString();});
        final Sink<String, CompletionStage<Done>> slowSink = Sink.foreach(str->{Thread.sleep(1000); System.out.println(str);});

        final RunnableGraph<NotUsed> secondGraph = source.buffer(16, OverflowStrategy.dropTail()).via(debugFlow).async().to(slowSink);
        secondGraph.run(materializer);

        // TASK 3 - graph dsl
        final Flow<Integer, Integer, NotUsed> addFlow = Flow.fromFunction((Integer n) -> n + 1);
        final Flow<Integer, Integer, NotUsed> multiplyFlow = Flow.fromFunction((Integer n) -> n * 10);
        final Sink<List<String>, CompletionStage<Done>> zipSink = Sink.foreach(str->System.out.println(str));

        // how to create
        // step 1 - frame
        final Graph<ClosedShape, CompletionStage<Done>> specialGraph = GraphDSL.create(zipSink , (builder, out)-> {
            //step 2 - building blocks
            //builder.add(doubleSink);

            final UniformFanOutShape<Integer, Integer> bcast = builder.add(Broadcast.create(2));
            final UniformFanInShape<Integer, Integer> merge = builder.add(Merge.create(2));

            final Outlet<Integer> dslSource = builder.add(source).out();
            // step 3 - glue components
            builder.from(dslSource).viaFanOut(bcast);
            builder.from(bcast).via(builder.add(addFlow)).viaFanIn(merge).via(builder.add(flow.grouped(2))).to(out);
            builder.from(bcast).via(builder.add(multiplyFlow)).toFanIn(merge);
            // step 4 closing
            return ClosedShape.getInstance();
        });
        RunnableGraph.fromGraph(specialGraph).run(materializer);

        try {
            System.out.println(">>> Press ENTER to exit <<<");
            System.in.read();
        } catch (IOException ignored) {
        } finally {
//            greeterMain.terminate();
//            mathContext.terminate();
//            helloSystem.terminate();
            streamSystem.terminate();
        }
    }
}
